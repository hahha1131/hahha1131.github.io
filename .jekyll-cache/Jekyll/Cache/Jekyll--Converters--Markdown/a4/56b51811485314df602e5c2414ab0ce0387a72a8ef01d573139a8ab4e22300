I"<<h1 id="알고리즘">알고리즘</h1>
<p>알고리즘이란 어떠한 과제나 작업 등을 수행하는 방법, 순서 등을 나타내는 것으로,<br />
작업을 완벽히 수행하는 데에 걸린 시간, 그 알고리즘을 컴퓨터에 적용했을 때 사용되는 공간으로<br />
알고리즘의 복잡도를 계산할 수 있다.</p>

<h2 id="공간-복잡도">공간 복잡도</h2>
<ul>
  <li>알고리즘이 실행될 때 사용하는 공간, 컴퓨터로 따지면 메모리의 양을 나타낸다.</li>
  <li>과거와 다르게 현대에는 데이터를 저장할 수 있는 메모리의 발전으로 공간 복잡도의 중요도가 낮아졌다.</li>
</ul>

<h2 id="시간-복잡도">시간 복잡도</h2>
<ul>
  <li>알고리즘에 입력되는 입력값의 변화에 따라 실행되는 조작의 수를 나타낸다.</li>
  <li>시간 복잡도를 나타내는 표기법에는 크게 3가지가 있다.
    <ul>
      <li>Big-O(빅-오) 표기법: 점근적 상한으로 최악의 경우에 대하여 나타내는 방법이다.</li>
      <li>Big-Ω(빅-오메가) 표기법: 점근적 하한으로 최선의 경우에 대하여 나타내는 방법이다.</li>
      <li>Big-θ(빅-세타) 표기법: 빅-오 표기법과 빅-오메가 표기법의 중간(평균)의 경우에 대하여 나타내는 방법이다.</li>
    </ul>
  </li>
</ul>

<h2 id="big-o빅-오-표기법">Big-O(빅-오) 표기법</h2>
<ul>
  <li>일반적으로 시간 복잡도를 표기한다면 Big-O 표기법을 사용한다.</li>
  <li>최악의 경우를 고려하기 때문에, 프로그램이 실행되는 데에 소요되는 최악의 시간까지 고려할 수 있다.</li>
  <li>최선의 경우를 고려하여 “최소 어느 정도의 시간이 걸린다” 또는 평균적인 경우를 고려하여 “어느 정도의 시간이 걸린다”를 고려하는 것보다   “어느 정도만큼의 시간까지 걸릴 수 있다”를 고려해야 최악의 경우에 맞는 대응이 가능하다.</li>
  <li>Big-O 표기법에는 입력되는 값 n값에 따른 여러 종류의 시간 복잡도가 존재한다.
    <ul>
      <li>O(1) 시간 복잡도: 상수 복잡도라고 하며, 입력 값 n에 상관없이 늘 같은 수행시간을 갖는다, 따라서 다른 복잡도 중에서 장기적으로 봤을 때 가장 빠른 속도를 갖는다.</li>
      <li>O(log N): 로그 복잡도: 입력되는 값 N이 증가함에 따라 log N에 비례하여 증가한다. O(n)에 비하여 소요시간이 완만하게 증가하여 O(1)의 바로 다음으로 빠른 속도를 갖는다.</li>
      <li>O(n) 시간 복잡도: 선형 복잡도라고 하며, 입력 값 n이 증가함에 따라 작업을 수행하는 데에 소요되는 시간 역시 같은 비율로 증가한다. n과 같은 비율로 소요시간이 증가하기 때문에 O(log N)의 바로 다음으로 빠른 속도를 갖는다.</li>
      <li>O(n^2) 시간 복잡도: 2차 복잡도라고 하며, 입력 값 n에 따라 소요시간이 n의 제곱수 비율로 증가한다. 예시로 n의 값으로 1을 입력했을 때 소요시간이 1이 걸렸는데, 5를 입력했을 때 소요시간이 25초가 걸리는 것으로 O(n) 다음으로 빠른 속도를 갖는다.</li>
      <li>O(2^n) 시간 복잡도: 기하급수적 복잡도라고 하며, n의 값에 따라 소요시간이 2의 n제곱 비율로 증가한다. 시간 복잡도 중 가장 느린 속도를 갖고 있으며, 만약 프로그램의 시간 복잡도가 기하급수적 복잡도가 나타난다면 다른 방식으로 접근하는 것이 좋다.</li>
    </ul>
  </li>
</ul>
:ET