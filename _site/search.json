[
  
    {
      "title"       : "분할 정복 알고리즘 (2)",
      "category"    : "",
      "tags"        : "",
      "url"         : "./%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98(2).html",
      "date"        : "2022-03-22 12:00:00 +0900",
      "description" : "",
      "content"     : "분할 정복 알고리즘바로 전 포스팅으로 분할 정복 알고리즘을 했으나, 이번 포스팅은 내가 고등학교 프로그래밍 동아리를 들어갈 때 테스트 문제로 했던 가짜 동전 찾기 문제를 다시 풀어보며 분할 정복 알고리즘에 대해 복습하려 한다.가짜 동전 찾기 전체적인 문제는 과거 동아리 선배들이 주던 문제의 형식을 따른다. 일단 문제의 기본 조건을 살펴보자면 동전이 10개 있다. 진짜 동전의 무게는 10이다. 가짜 동전은 진짜 동전보다 무게가 3만큼 가볍다. (가짜 동전의 무게: 7) 저울을 처음 사용할 때, 무게의 차이를 표시하는 데에 걸리는 시간은 0이다. (결과가 바로 표시됨) 양팔저울은 계속 사용할 수 있으나, 저울을 사용할 때마다 비교값을 표시하는 시간이 1분씩 증가한다. 최종적으로 가짜 동전을 판별하는 데에 발생한 저울 사용 횟수와 시간이 적을수록 더 큰 보상을 받는다. 그 당시에 저 문제를 받았을 때에는 분할 정복을 사용하라는 말이 없었고, 나도 본격적으로 알고리즘 공부를 하지 않았던 때라서 정말 다양한 방법으로, 어쩌면 비효율적인 방법들로 문제를 해결하려고 시도했었다.내가 시도했던 방법들을 일부 나열하면 양팔저울의 양쪽에 동전을 하나씩 비교하여 찾는 방법 동전을 2개씩 묶어 한 번에 총 4개씩 비교하는 방법 하나의 동전을 한쪽에 고정시켜 나머지 동전을 비교하는 방법위의 방법 외에도 다른 방법도 많았지만, 대부분의 과정이 거의 비슷했다. 저 방법을 이용하여 풀었을 때 동아리 선배들은 다양하게 풀기는 했지만, 가장 효율적인 방법을 찾지는 못했다고 하며 분할 정복 알고리즘에 대해 알려주었다.동전 찾기 적어도 내가 아는 방법 중 가장 효율적으로 보였던 방법을 풀어보겠다. 동전을 5개씩, 2묶음으로 나눈다. 2묶음의 차이를 비교하기 위해 한 번 저울을 사용한다. 더 가벼운 묶음에 가짜 동전이 있는 것으로 판단하고, 더 무거운 묶음의 동전 5개는 제외한다. 가짜 동전이 있는 묶음에는 5개의 동전이 있기에 동전을 하나 임시로 제외하고 2개씩 나누어 2묶음으로 나눈다. 여기서 결과가 2개로 나누어지는데 만약 2묶음의 무게가 같다면, 방금 임시로 제외한 동전이 가짜 동전이 된다. 2개의 묶음 중 가벼운 묶음이 있다면, 그 묶음에 가짜 동전이 있는 것이 된다. 만약 제외했던 동전이 가짜가 된다면, 알고리즘은 여기서 끝이 난다. 위의 상황이 아니라면, 더 가벼운 묶음으로 판별된 2개의 동전의 무게를 비교하여 가짜 동전을 찾는다. 위 풀이를 보고 난 후, 동아리 선배들이 어떤 언어든 좋으니 가장 자신있는 언어로 해당 알고리즘을 프로그램으로 구현하라는 개인 과제를 받았었다. 그나마 자신있었던 언어가 C였기에 C로 구현했었고, 동아리에 합격할 수 있었다.소스코드를 보자면#include &lt;stdio.h&gt;int main(){ int coin[10]; //coin 배열 생성 int tempA[10]; //임시배열 생성 int tempB[10]; //임시배열 생성 int i, j, k; //정수 i, j, k 생성 int sumA, sumB = 0; //묶음의 무게 합 // coin 배열 원소 10으로 초기화, 임시 배열 원소 0으로 초기화 for(int i = 0; i &lt; 10; i++){ coin[i] = 10; tempA[i] = 0; tempB[i] = 0; } coin[3] = 7; // 가짜 동전 무게 7로 설정 // 10개의 동전을 5개씩 2그룹으로 분리 for(int i = 0; i &lt; 5; i++){ tempA[i] = coin[i]; sumA += tempA[i]; // 그룹 원소들의 합 } printf(\"First group's weight: %d\\n\", sumA); for(int j = 5; j &lt; 10; j++){ tempB[j] = coin[j]; sumB += tempB[j]; } printf(\"Second group's weight : %d\\n\", sumB); if(sumA &lt; sumB) { printf(\"\\nFake coin is in First group.\\n\\n\"); for(i = 0; i &lt; 5; i++){ // 임시배열 초기화 tempA[i] = 0; tempB[i] = 0; } sumA = 0; sumB = 0; // 그룹합 초기화 // tempA에 가짜 동전이 있기에 tempA를 다시 분리 for(j = 0; j &lt; 2; j++) { tempA[j] = coin[j]; sumA += tempA[j]; } printf(\"tempA's weight: %d\\n\", sumA); for(k = 2; k &lt; 4; k++){ tempB[k] = coin[k]; sumB += tempB[k]; } printf(\"tempB's weight: %d\\n\\n\", sumB); // 한 그룹에 동전이 2개라면 가짜 동전이 어디있는지 알 수 있음 if(sumA &lt; sumB){ printf(\"Fake coin is in tempA.\\n\\n\"); } else if(sumA &gt; sumB){ printf(\"Fake coin is in tempB.\\n\\n\"); if(tempB[2] &lt; tempB[3]){ printf(\"Fake coin is tempB[2], coin[3].\\n\"); } else printf(\"Fake coin is tempB[3], coin[3].\\n\"); } else if(sumA = sumB) printf(\"Fake coin is coin [9.]\\n\"); else printf(\"error\\n\"); } return 0;} 위의 소스코드에서는 가짜 동전의 위치가 정해져 있기 때문에 몇몇 부분을 생략하여 간단하게 표현했지만, 실제로는 더 많은 코드가 필요할 것이다. 그리고 고등학교 시절 기준으로 코드를 쓴 것이기 때문에 함수를 활용하지 않았다.(고등학생 때는 함수를 활용하지 못했기 때문이다) 따라서 함수를 이용하여 더 간결하게 쓸 수 있는 부분도 있다. 그러나 어느 부분에서 그룹이 나누어지고(분할) 어떻게 가짜 동전의 위치를 파악(정복)하는지 보기에는 충분한 코드가 아니었을까 싶다."
    } ,
  
    {
      "title"       : "분할 정복 알고리즘",
      "category"    : "",
      "tags"        : "",
      "url"         : "./%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html",
      "date"        : "2022-03-21 14:20:00 +0900",
      "description" : "",
      "content"     : "분할 정복 알고리즘 분할 정복 알고리즘이란 단 한 번으로 동시에 해결하기 어려운 문제를 더 이상 나눌 수 없을 정도의 문제로 나누어 각각 해답을 얻은 후 다시 병합하여 문제를 해결하는 알고리즘이다. 단순히 분할만 해서는 문제를 해결할 수 없고, 알고리즘의 이름과 같이 분할을 한 문제들을 정복해야 한다.분할 정복 알고리즘의 분류합병 정렬 합병 정렬(Merge Sort)은 입력이 2개의 부분문제로 분할이 되고, 부분문제의 크기가 1/2로 감소하는 분할 정복 알고리즘이다. 입력된 N을 N/2개씩 2개의 문제로 분할하고, 각각의 문제를 합병 정렬한 후, 2개의 정렬된 부분을 합병하여 정렬한다. 즉, 합병 과정이 문제를 정복하는 것이다.//합병 정렬 알고리즘MergeSort(A,p,q)입력 A[p]~A[q]출력 정렬된 A[p]~A[q]if (p &lt; q) { // 배열의 원소의 수가 2개 이상이면 k = [(p+q)/2] // k = 배열을 반으로 나누기 위한 인덱스 MergeSort(A,p,k) // 앞부분 순환 호출 MergeSort(A,k+1,~q) // 뒷부분 순환 호출 A[p]~A[k], A[k+1]~A[q]를 합병} if문에서는 정렬한 부분의 원소가 2개 이상일 때 수행되도록 함 정렬할 부분의 원소들을 1/2로 나누기 위해 k의 값을 계산 MergeSort를 호출하여 각각 정렬 임시 배열을 이용하여 임시 배열에 정렬되어 있던 값을 복사하는 방식으로 두 배열을 합병 합병 정렬의 시간복잡도는 (층수) X O(N) = log 2 n X O(N) = O(NlogN)이다. 합병 정렬은 외부정렬의 기본이 되는 정렬 알고리즘이다. 연결 리스트에 있는 데이터를 정렬할 때에도 퀵 정렬이나 합 정렬보다 훨씬 효율적이다. 정렬 알고리즘을 병렬화하는 데에 합병 정렬 알고리즘이 활용된다. (ex&gt; 멀티코어 CPU, 다수의 프로세서로 구성된 그래픽 처리 장치)퀵 정렬 퀵 정렬(Quick Sort)은 분할 정복 알고리즘으로 분류되지만, 수행되는 과정을 살펴보면 정북 후에 분할을 하는 알고리즘이다. 퀵 정렬은 문제를 2개의 부분문제로 분할하는데, 각 부분문제의 크기가 일정하지 않은 형태의 분할 정복 알고리즘이다. 퀵 정렬은 피봇(pivot)이라는 배열의 원소(숫자)를 기준으로 피봇보다 작은 숫자들은 왼쪽, 큰 숫자들은 오른쪽에 위치하도록 분할하고, 피봇을 그 사이에 놓는 방식이다.//퀵 정렬 알고리즘QuickSort(A,L,R) //(L은 Left, R은 Right)입력: 배열 A[L]~A[R]출력: 정렬된 배열 A[L]~A[R]if(L &lt; R){ A[L]~A[R] 중에서 피봇을 선택하고 피봇을 A[L]과 위치를 바꾼 후, 피봇과 배열의 원소들을 각각 비교한 후 피봇보다 작은 숫자들은 A[L]~A[p-1]로, 피봇보다 큰 숫자들은 A[p+1]~A[R]로 옮기며, 피봇은 A[p]에 위치시킨다. (p는 피봇{pivot}) QuickSort(A,L,p-1) //피봇보다 작은 배열 QuickSort(A,p+1,R) //피봇보다 큰 배열} if문에서는 L이 R보다 작으면 그 밑의 과정들을 실행한다. 만약 그렇지 않다면 L = R인 것이므로, 더 이상 분할할 수 없는, 1개의 원소를 정렬하는 것이 되므로 밑의 과정을 실행하지 않고 끝낸다. if문과 QuickSort 사이의 부분에서는 배열의 원소들 중 피봇(기준값)을 정하고 피봇을 기준으로 작은 값들을 A[L]에서 A[p-1]까지, 피봇을 기준으로 큰 값들을 A[p+1]에서 A[R]에 위치시킨다. p는 피봇이 위치하게 되는 배열 A의 인덱스이다. QuickSort(A,L,p-1)는 피봇보다 작은 그룹을 순환적으로 호출 QuickSort(A,p+1,R)는 피봇보다 큰 그룹을 순환적으로 호출 퀵 정렬의 성능은 피봇의 값이 좌우한다. 피봇을 너무 작거나 큰 숫자로 선택하면, 균형이 맞지 않는 분할이 발생할 수 있다. 가장 이상적인 피봇을 선택됐을 때의 시간복잡도를 계산하면, O(n) X (층수) = O(n) X (log2n)이다. 따라서 퀵 정렬의 시간복잡도는 O(nlog2n)이다.피봇 선정 방법 3 숫자의 중앙값으로 선정: 가장 왼쪽, 중앙, 가장 오른쪽 숫자 중에서 중앙값으로 정한다. 중앙값들 중의 중앙값: 입력을 3등분하여 각 부분에서 숫자의 중앙값을 찾아 3개의 중앙값에서 중앙값을 피봇으로 삼는다. 퀵 정렬은 실질적으로 어느 정렬 알고리즘보다 좋은 성능을 보인다. 또한 생물 정보 공학에서 특정 유전자를 찾는 데 접미 배열과 함께 퀵 정렬이 활용된다.분할 정복 알고리즘 문제 퀵 정렬 알고리즘 문제로 포스팅을 마무리하려 한다. 문제는 교재 p.74에 나와있는 예제이다. (조금씩 숫자를 변경함)QuickSort(A, 0, 10) 호출 배열 A를 인덱스 0~10까지 만든다. 각 인덱스에는| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 ||---|---|----|---|----|---|---|----|----|---|----|| 5 | 2 | 10 | 8 | 11 | 1 | 7 | 14 | 17 | 9 | 6 | 앞서 언급했던 3 숫자의 중앙값으로 선정하는 방법을 이용하여 피봇을 5로 설정한다.pivot: A[0] = 5| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 ||---|---|----|---|----|---|---|----|----|---|----|| 5 | 2 | 10 | 8 | 11 | 1 | 7 | 14 | 17 | 9 | 6 | 피봇을 가장 왼쪽으로 옮긴다. 이미 가장 왼쪽 자리에 5가 있으므로 배열의 위치는 그대로. 그 후 피봇보다 큰 수와 피봇보다 작은 수를 왼쪽에 몰아주고, 큰 수를 오른쪽에 몰아준다.| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 ||---|---|----|---|----|---|---|----|----|---|----|| 5 | 2 | 10 | 8 | 11 | 1 | 7 | 14 | 17 | 9 | 6 |=&gt; | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | |---|---|---|---|----|---|---|----|----|---|----| | 5 | 2 | 1 | 8 | 11 | 6 | 7 | 14 | 17 | 9 | 10 | 이후 피봇을 A[2]로 옮기기 위해 A[0]과 교환해준다.A[2]로 이동하는 이유는 피봇보다 작으면서 가장 오른쪽에 있는 숫자 1이 A[2]에 있기 때문이다.| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 ||---|---|---|---|----|---|---|----|----|---|----|| 1 | 2 | 5 | 8 | 11 | 6 | 7 | 14 | 17 | 9 | 10 | 그다음 QuickSort가 실행된다. QuickSort(A,0,2-1) = QuickSort(A,0,1) QuickSort(A,2+1,10) = QuickSort(A,3,10) QuickSort(A,0,1) 호출| 0 | 1 ||---|---|| 1 | 2 | 피봇이 A[1] = 2라면, A[1]을 A[0]과 바꾼다.| 0 | 1 ||---|---|| 2 | 1 |피봇보다 작은 숫자를 A[1-1]의 위치, A[0]으로 옮긴다.=&gt; | 0 | 1 | |---|---| | 1 | 2 |QuickSort(A,3,10) 호출| 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 ||---|----|---|---|----|----|---|----|| 8 | 11 | 6 | 7 | 14 | 17 | 9 | 10 | 피봇이 A[3] = 8 이라면, 이미 왼쪽에 있으니 왼쪽으로 옮기는 과정 생략 이후 피봇보다 작은 숫자와 큰 숫자를 정렬해준다.| 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 ||---|---|---|----|----|----|---|----|| 8 | 6 | 7 | 11 | 14 | 17 | 9 | 10 | 정렬이 끝난 후 피봇을 A[5]로 옮겨준다. 이유는 처음 피봇을 결정한 과정 중에 기술| 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 ||---|---|---|----|----|----|---|----|| 7 | 6 | 8 | 11 | 14 | 17 | 9 | 10 | 다음 QuickSort를 통해 피봇보다 작은 그룹을 정렬한다.QuickSort(A,3,4) 호출| 3 | 4 ||---|---|| 7 | 6 | 피봇을 A[4] = 6으로 설정, 피봇을 왼쪽으로 옮겨준다.| 3 | 4 ||---|---|| 6 | 7 | 그다음 QuickSort(A,4,4)는 그 자체로 정렬이 된 것으로 QuickSort 완성| 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 ||---|---|---|----|----|----|---|----|| 6 | 7 | 8 | 11 | 14 | 17 | 9 | 10 | 다음 QuickSort(A,6,10) 위의 과정들과 동일하므로 생략모든 QuickSort를 마치며 QuickSort를 끝낸 후, 최종 결과는 다음과 같다.| 0 | 1 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 ||---|---|---|---|---|---|----|----|----|----|| 1 | 2 | 6 | 7 | 8 | 9 | 10 | 11 | 14 | 17 | 이번 분류를 하며 느낀 것은 피봇을 조금 더 세세한 과정을 통해 결정하는 것이 더 좋겠다는 것이다. 현재 이 과정을 하며 단순히 가장 왼쪽, 중앙, 가장 오른쪽의 총 3 숫자 중에서 중앙값을 피봇으로 하는 것은이후 퀵 정렬을 할 때, 과정이 상당히 복잡하고 어려워질 수도 있다는 것을 알게 되었다. 피봇 값을 인간이 결정한다고 하면 단순히 모든 값들 중 가장 중간 값에 가까운 값을 정하면 되지만,컴퓨터의 관점에서는 모든 값을 비교하면 비효율적이라는 것을 알기에 더 좋은 피봇 결정 방법을 알아내야 한다."
    } ,
  
    {
      "title"       : "2주차 수업 포스팅",
      "category"    : "",
      "tags"        : "",
      "url"         : "./2%EC%A3%BC%EC%B0%A8-%EC%88%98%EC%97%85-%ED%8F%AC%EC%8A%A4%ED%8C%85.html",
      "date"        : "2022-03-14 13:48:00 +0900",
      "description" : "",
      "content"     : "알고리즘알고리즘이란 어떠한 과제나 작업 등을 수행하는 방법, 순서 등을 나타내는 것으로,작업을 완벽히 수행하는 데에 걸린 시간, 그 알고리즘을 컴퓨터에 적용했을 때 사용되는 공간으로알고리즘의 복잡도를 계산할 수 있다.공간 복잡도 알고리즘이 실행될 때 사용하는 공간, 컴퓨터로 따지면 메모리의 양을 나타낸다. 과거와 다르게 현대에는 데이터를 저장할 수 있는 메모리의 발전으로 공간 복잡도의 중요도가 낮아졌다.시간 복잡도 알고리즘에 입력되는 입력값의 변화에 따라 실행되는 조작의 수를 나타낸다. 시간 복잡도를 나타내는 표기법에는 크게 3가지가 있다. Big-O(빅-오) 표기법: 점근적 상한으로 최악의 경우에 대하여 나타내는 방법이다. Big-Ω(빅-오메가) 표기법: 점근적 하한으로 최선의 경우에 대하여 나타내는 방법이다. Big-θ(빅-세타) 표기법: 빅-오 표기법과 빅-오메가 표기법의 중간(평균)의 경우에 대하여 나타내는 방법이다. Big-O(빅-오) 표기법 일반적으로 시간 복잡도를 표기한다면 Big-O 표기법을 사용한다. 최악의 경우를 고려하기 때문에, 프로그램이 실행되는 데에 소요되는 최악의 시간까지 고려할 수 있다. 최선의 경우를 고려하여 “최소 어느 정도의 시간이 걸린다” 또는 평균적인 경우를 고려하여 “어느 정도의 시간이 걸린다”를 고려하는 것보다 “어느 정도만큼의 시간까지 걸릴 수 있다”를 고려해야 최악의 경우에 맞는 대응이 가능하다. Big-O 표기법에는 입력되는 값 n값에 따른 여러 종류의 시간 복잡도가 존재한다. O(1) 시간 복잡도: 상수 복잡도라고 하며, 입력 값 n에 상관없이 늘 같은 수행시간을 갖는다, 따라서 다른 복잡도 중에서 장기적으로 봤을 때 가장 빠른 속도를 갖는다. O(log N): 로그 복잡도: 입력되는 값 N이 증가함에 따라 log N에 비례하여 증가한다. O(n)에 비하여 소요시간이 완만하게 증가하여 O(1)의 바로 다음으로 빠른 속도를 갖는다. O(n) 시간 복잡도: 선형 복잡도라고 하며, 입력 값 n이 증가함에 따라 작업을 수행하는 데에 소요되는 시간 역시 같은 비율로 증가한다. n과 같은 비율로 소요시간이 증가하기 때문에 O(log N)의 바로 다음으로 빠른 속도를 갖는다. O(n^2) 시간 복잡도: 2차 복잡도라고 하며, 입력 값 n에 따라 소요시간이 n의 제곱수 비율로 증가한다. 예시로 n의 값으로 1을 입력했을 때 소요시간이 1이 걸렸는데, 5를 입력했을 때 소요시간이 25초가 걸리는 것으로 O(n) 다음으로 빠른 속도를 갖는다. O(2^n) 시간 복잡도: 기하급수적 복잡도라고 하며, n의 값에 따라 소요시간이 2의 n제곱 비율로 증가한다. 시간 복잡도 중 가장 느린 속도를 갖고 있으며, 만약 프로그램의 시간 복잡도가 기하급수적 복잡도가 나타난다면 다른 방식으로 접근하는 것이 좋다."
    } ,
  
    {
      "title"       : "Week2",
      "category"    : "",
      "tags"        : "",
      "url"         : "./week2.html",
      "date"        : "2022-03-11 16:06:00 +0900",
      "description" : "",
      "content"     : "Git / Github git: 버전관리시스템(vcs): 로컬 저장소 버전관리, 협업 github: git -&gt; 온라인 저장소 : 협업툴, 버전관리 github pages: 웹 호스팅: 무료 (jekyll)명령어저장소 초기화‘git init [directory]’‘git clone [repositoty] [directory]’ : 초기 작업 명령어버전 관리 (업데이트)‘git pull’ : 온라인 저장소 -&gt; 로컬 저장소 다운로드 : git clone 이후 사용하는 작업 명령어‘git add [file…]’ : 커밋할 파일들 스테이징‘git commit -m [message]’ :스테이징 파일 -&gt; 버전 업데이트‘git push’ : 로컬 저장소 -&gt; 온라인 저장소 업로드상태‘git status’‘git log’"
    } ,
  
    {
      "title"       : "1주차",
      "category"    : "",
      "tags"        : "",
      "url"         : "./week1.html",
      "date"        : "2022-03-04 15:40:00 +0900",
      "description" : "",
      "content"     : "#제목: 1주차 첫 포스팅# 내용 내용 내 림 차 순?굵게 기울임? /기울임/*대분류 *소분류"
    } ,
  
    {
      "title"       : "행운의 편지",
      "category"    : "",
      "tags"        : "",
      "url"         : "./%ED%96%89%EC%9A%B4%EC%9D%98-%ED%8E%B8%EC%A7%80.md.html",
      "date"        : "2022-03-04 15:13:00 +0900",
      "description" : "",
      "content"     : "이 편지는 영국에서부터 시작되어1.제목 2.소제목 4.부제목 5.이름 학번기울임 대분류 *소분류 *소분류_언더바"
    } ,
  
    {
      "title"       : "Welcome to Jekyll!",
      "category"    : "",
      "tags"        : "",
      "url"         : "./welcome-to-jekyll.html",
      "date"        : "2022-03-04 15:13:00 +0900",
      "description" : "",
      "content"     : "You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.Jekyll requires blog post files to be named according to the following format:YEAR-MONTH-DAY-title.MARKUPWhere YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.Jekyll also offers powerful support for code snippets:def print_hi(name) puts \"Hi, #{name}\"endprint_hi('Tom')#=&gt; prints 'Hi, Tom' to STDOUT.Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk."
    } 
  
]
